{
  "name": "EdgeQL",
  "scopeName": "source.edgeql",
  "fileTypes": [
    "edgeql",
    "esdl"
  ],
  "uuid": "a560aad6-9c13-49c5-a369-5fb272c8ec1a",
  "patterns": [
    {
      "include": "#all"
    }
  ],
  "repository": {
    "all": {
      "patterns": [
        {
          "include": "#fnstatement"
        },
        {
          "include": "#expressions"
        },
        {
          "name": "punctuation.statement.delimiter.edgeql",
          "match": "(;)"
        }
      ]
    },
    "expressions": {
      "patterns": [
        {
          "include": "#comments"
        },
        {
          "include": "#code"
        },
        {
          "include": "#keywords"
        },
        {
          "include": "#fncalls"
        },
        {
          "include": "#operators"
        },
        {
          "include": "#builtins"
        },
        {
          "include": "#types"
        },
        {
          "include": "#quoted-name"
        },
        {
          "include": "#values"
        },
        {
          "include": "#link-properties"
        },
        {
          "include": "#variables"
        },
        {
          "include": "#parentheses"
        },
        {
          "include": "#squarebraces"
        },
        {
          "include": "#curlybraces"
        },
        {
          "include": "#casts"
        }
      ]
    },
    "code": {
      "patterns": [
        {
          "match": "(?xi)\n  \\b(FROM) \\s+ (EDGEQL | SQL) \\s+ (EXPRESSION)\n",
          "captures": {
            "1": {
              "name": "keyword.declaration.edgeql"
            },
            "3": {
              "name": "keyword.declaration.edgeql"
            }
          }
        },
        {
          "begin": "(?xi)\n  \\b(FROM) \\s+\n  (SQL) \\s+\n  (\\$\\w?\\$)\n",
          "end": "(\\3)",
          "beginCaptures": {
            "1": {
              "name": "keyword.declaration.edgeql"
            },
            "3": {
              "name": "string.quoted.edgeql"
            }
          },
          "endCaptures": {
            "1": {
              "name": "string.quoted.edgeql"
            }
          },
          "patterns": [
            {
              "include": "source.sql"
            }
          ]
        },
        {
          "begin": "(?xi)\n  \\b(FROM) \\s+\n  (EDGEQL) \\s+\n  (\\$\\w?\\$)\n",
          "end": "(\\3)",
          "beginCaptures": {
            "1": {
              "name": "keyword.declaration.edgeql"
            },
            "3": {
              "name": "string.quoted.edgeql"
            }
          },
          "endCaptures": {
            "1": {
              "name": "string.quoted.edgeql"
            }
          },
          "patterns": [
            {
              "include": "source.edgeql"
            }
          ]
        }
      ]
    },
    "fnstatement": {
      "begin": "(?ix) \\b(?<![:\\.])(FUNCTION|AGGREGATE|ABSTRACT CONSTRAINT)\\b",
      "end": "(?=[^\\s\\w:]|\\bEXTENDING\\b|$)",
      "beginCaptures": {
        "1": {
          "name": "keyword.declaration.edgeql"
        }
      },
      "patterns": [
        {
          "include": "#builtins"
        },
        {
          "include": "#identifier"
        },
        {
          "name": "keyword.operator.namespace.edgeql",
          "match": "(::)"
        }
      ]
    },
    "fncallargs": {
      "patterns": [
        {
          "include": "#definition"
        },
        {
          "include": "#expressions"
        },
        {
          "name": "punctuation.separator.arguments.edgeql",
          "match": "(,)"
        },
        {
          "name": "invalid.illegal.delimiter.edgeql",
          "match": "(;)"
        }
      ]
    },
    "definition": {
      "match": "(?x)\n  (?:\n    ([[:alpha:]_][[:alnum:]_]*)\n    |\n    ([\\.\\d]\\S*?)\n  ) (?=\\s*:=)\n",
      "captures": {
        "1": {
          "name": "variable.parameter.definition.edgeql"
        },
        "2": {
          "name": "invalid.illegal.definition.edgeql"
        }
      }
    },
    "parencommon": {
      "patterns": [
        {
          "name": "punctuation.separator.element.edgeql",
          "match": "(,)"
        },
        {
          "name": "invalid.illegal.delimiter.edgeql",
          "match": "(;)"
        }
      ]
    },
    "parentheses": {
      "begin": "(\\()",
      "end": "(\\))",
      "beginCaptures": {
        "1": {
          "name": "punctuation.parenthesis.begin.edgeql"
        }
      },
      "endCaptures": {
        "1": {
          "name": "punctuation.parenthesis.end.edgeql"
        }
      },
      "patterns": [
        {
          "include": "#expressions"
        },
        {
          "include": "#parencommon"
        }
      ]
    },
    "squarebraces": {
      "begin": "(\\[)",
      "end": "(\\])",
      "beginCaptures": {
        "1": {
          "name": "punctuation.parenthesis.begin.edgeql"
        }
      },
      "endCaptures": {
        "1": {
          "name": "punctuation.parenthesis.end.edgeql"
        }
      },
      "patterns": [
        {
          "name": "keyword.operator.edgeql",
          "match": "(^|\\b|\\s)(->)($|\\b|\\s)"
        },
        {
          "include": "#expressions"
        },
        {
          "include": "#parencommon"
        }
      ]
    },
    "curlybraces": {
      "begin": "(\\{)",
      "end": "(\\})",
      "beginCaptures": {
        "1": {
          "name": "punctuation.parenthesis.begin.edgeql"
        }
      },
      "endCaptures": {
        "1": {
          "name": "punctuation.parenthesis.end.edgeql"
        }
      },
      "patterns": [
        {
          "include": "#comments"
        },
        {
          "include": "#commandblock"
        },
        {
          "include": "#shape"
        }
      ]
    },
    "commandblock": {
      "begin": "(?=SET|CREATE|ALTER|DROP|RENAME|FROM)",
      "end": "(?=\\})",
      "patterns": [
        {
          "include": "#all"
        }
      ]
    },
    "shape": {
      "begin": "(?=\\S)",
      "end": "(?=\\})",
      "patterns": [
        {
          "name": "punctuation.statement.delimiter.edgeql",
          "match": "(;)"
        },
        {
          "include": "#expressions"
        },
        {
          "include": "#parencommon"
        }
      ]
    },
    "comments": {
      "patterns": [
        {
          "name": "comment.line.number-sign.edgeql",
          "match": "(#)\\s*((BUG|FIXME|TODO|XXX)).*$\\n?",
          "captures": {
            "1": {
              "name": "punctuation.definition.comment.edgeql"
            },
            "2": {
              "name": "comment.line.note.notation.edgeql"
            },
            "3": {
              "name": "comment.line.note.edgeql"
            }
          }
        },
        {
          "name": "comment.line.number-sign.edgeql",
          "match": "(#).*$\\n?",
          "captures": {
            "1": {
              "name": "punctuation.definition.comment.edgeql"
            }
          }
        }
      ]
    },
    "keywords": {
      "patterns": [
        {
          "name": "constant.language.boolean.true.edgeql",
          "match": "(?i)\\b(TRUE)\\b"
        },
        {
          "name": "constant.language.boolean.false.edgeql",
          "match": "(?i)\\b(FALSE)\\b"
        },
        {
          "name": "constant.language.empty.edgeql",
          "match": "(?i)\\b(EMPTY)\\b"
        },
        {
          "name": "keyword.declaration.edgeql",
          "match": "(?i)\\b(?<!::|\\.|\\.<|\\.>)(CONSTRAINT)\\b(?!=\\s+\\()"
        },
        {
          "name": "keyword.declaration.edgeql",
          "match": "(?ix) \\b(?<!::|\\.|\\.<|\\.>)(\n  (?# special case)\n  (named \\s+ only)\n  |\n  (as \\s+ text)\n  |\n  (all (?!\\s*\\())\n  |\n\n  (?# unreserved)\n  abort | abstract | access | after | alias |\n  allow | annotation | applied | as | asc |\n  assignment | before | cardinality | cast | committed |\n  config | conflict | cube | current | database |\n  ddl | declare | default | deferrable | deferred |\n  delegated | deny | desc | each | empty |\n  extension | final | first | from | function |\n  future | implicit | index | infix | inheritable |\n  instance | into | isolation | last | link |\n  migration | multi | object | of | only |\n  onto | operator | optionality | order | orphan |\n  overloaded | owned | package | policy | populate |\n  postfix | prefix | property | proposed | pseudo |\n  read | reject | release | rename | required |\n  reset | restrict | rewrite | role | roles |\n  rollup | savepoint | scalar | schema | sdl |\n  serializable | session | source | superuser | system |\n  target | ternary | then | to | transaction |\n  trigger | type | unless | using | verbose |\n  version | view | write\n  |\n  (?# reserved)\n  administer | alter | analyze | and | anyarray |\n  anyobject | anytuple | begin | by | case |\n  check | commit | configure | create | deallocate |\n  delete | describe | detached | discard | distinct |\n  do | drop | else | end | except |\n  exists | explain | extending | fetch | filter |\n  for | get | global | grant | group |\n  if | ilike | import | in | insert |\n  intersect | introspect | is | like | limit |\n  listen | load | lock | match | module |\n  move | never | not | notify | offset |\n  on | optional | or | over | partition |\n  prepare | raise | refresh | revoke | rollback |\n  select | set | single | start | typeof |\n  union | update | variadic | when | window |\n  with\n)\\b\n"
        }
      ]
    },
    "operators": {
      "patterns": [
        {
          "name": "keyword.operator.navigation.edgeql",
          "match": "(\\.[<>])"
        },
        {
          "name": "keyword.operator.namespace.edgeql",
          "match": "(::)"
        },
        {
          "name": "keyword.declaration.edgeql",
          "match": "->"
        },
        {
          "name": "punctuation.declaration.delimiter.edgeql",
          "match": "(:(?!=))"
        },
        {
          "name": "keyword.operator.edgeql",
          "match": "(?x)\n  \\?\\!\\= | \\?\\? | \\?\\= | \\>\\= | \\<\\= | \\:\\= | \\/\\/ | \\+\\+ |\n  \\!\\= | \\^ | \\> | \\= | \\< | \\/ | \\- | \\+ |\n  \\* | \\%\n"
        }
      ]
    },
    "types": {
      "patterns": [
        {
          "begin": "\\b(?<!::|\\.)(tuple)\\s*(<)",
          "end": "(>)",
          "beginCaptures": {
            "1": {
              "name": "storage.type.edgeql"
            },
            "2": {
              "name": "storage.type.placeholder.begin.edgeql"
            }
          },
          "endCaptures": {
            "1": {
              "name": "storage.type.placeholder.end.edgeql"
            }
          },
          "patterns": [
            {
              "include": "#types"
            },
            {
              "name": "punctuation.separator.type.edgeql",
              "match": "(,)"
            },
            {
              "match": "(:)"
            },
            {
              "include": "#types-common"
            }
          ]
        },
        {
          "begin": "\\b(?<!::|\\.)(array)\\s*(<)",
          "end": "(>)",
          "beginCaptures": {
            "1": {
              "name": "storage.type.edgeql"
            },
            "2": {
              "name": "storage.type.placeholder.begin.edgeql"
            }
          },
          "endCaptures": {
            "1": {
              "name": "storage.type.placeholder.end.edgeql"
            }
          },
          "patterns": [
            {
              "name": "invalid.illegal.type.edgeql",
              "match": "array"
            },
            {
              "include": "#types"
            },
            {
              "include": "#array-dimensions"
            },
            {
              "include": "#types-common"
            }
          ]
        },
        {
          "name": "storage.type.edgeql",
          "match": "(?x) \\b(?<!::|\\.)(\n  array | tuple\n)\\b\n"
        },
        {
          "include": "#builtin-modules"
        },
        {
          "include": "#builtin-types"
        },
        {
          "include": "#builtin-indexes"
        }
      ]
    },
    "types-common": {
      "patterns": [
        {
          "include": "#identifier"
        },
        {
          "name": "keyword.operator.namespace.edgeql",
          "match": "(::)"
        }
      ]
    },
    "array-dimensions": {
      "begin": "(\\[)",
      "end": "(\\])",
      "beginCaptures": {
        "1": {
          "name": "punctuation.parenthesis.begin.edgeql"
        }
      },
      "endCaptures": {
        "1": {
          "name": "punctuation.parenthesis.end.edgeql"
        }
      },
      "patterns": [
        {
          "name": "constant.numeric.edgeql",
          "match": "(\\d+)"
        },
        {
          "name": "invalid.illegal.type.edgeql",
          "match": "\\S+"
        }
      ]
    },
    "variables": {
      "name": "constant.language.variable.edgeql",
      "begin": "(\\$)(?=[[:alnum:]_]|`)",
      "end": "(?<=[[:alnum:]_`])",
      "patterns": [
        {
          "include": "#identifier"
        },
        {
          "include": "#quoted-name"
        },
        {
          "match": "(\\d)+"
        }
      ]
    },
    "link-properties": {
      "name": "support.other.linkproperty.edgeql",
      "begin": "(\\@)",
      "end": "(?<=[[:alnum:]_`])",
      "patterns": [
        {
          "include": "#identifier"
        },
        {
          "include": "#quoted-name"
        }
      ]
    },
    "identifier": {
      "match": "([[:alpha:]_][[:alnum:]_]*)"
    },
    "quoted-name": {
      "name": "string.interpolated.edgeql",
      "match": "(`.*?`)"
    },
    "values": {
      "patterns": [
        {
          "include": "#number"
        },
        {
          "include": "#bytes"
        },
        {
          "include": "#string"
        }
      ]
    },
    "number": {
      "patterns": [
        {
          "name": "constant.numeric.float.edgeql",
          "match": "(?x)\n  (?:\n    #decimal part\n    \\.(_*)(?:[0-9](?:[0-9_]*[0-9])?)\n    |\n    # integer part\n    \\b(?: [1-9](?: [0-9_]*[0-9] )? | 0 )\n      (?:\\.(_*)[0-9](?:[0-9_]*[0-9])?)\n  )\n  ((_*)([eE][\\+\\-]?)(_*)[0-9](?:[0-9_]*[0-9])?)?\n\n  (_*)\n  \\b\n",
          "captures": {
            "1": {
              "name": "invalid.illegal.dec.edgeql"
            },
            "2": {
              "name": "invalid.illegal.dec.edgeql"
            },
            "4": {
              "name": "invalid.illegal.dec.edgeql"
            },
            "5": {
              "name": "storage.type.number.edgeql"
            },
            "6": {
              "name": "invalid.illegal.dec.edgeql"
            },
            "7": {
              "name": "invalid.illegal.dec.edgeql"
            }
          }
        },
        {
          "name": "constant.numeric.float.edgeql",
          "match": "(?x)\n  (?:\n    # integer part\n    \\b(?:[1-9](?:[0-9_]*[0-9])?|0)\n  )\n  ((_*)([eE][\\+\\-]?)(_*)[0-9](?:[0-9_]*[0-9])?)\n\n  (_*)\n  \\b\n",
          "captures": {
            "2": {
              "name": "invalid.illegal.dec.edgeql"
            },
            "3": {
              "name": "storage.type.number.edgeql"
            },
            "4": {
              "name": "invalid.illegal.dec.edgeql"
            },
            "5": {
              "name": "invalid.illegal.dec.edgeql"
            }
          }
        },
        {
          "name": "constant.numeric.decimal.edgeql",
          "match": "(?x)\n  (?:\n    #decimal part\n    \\.(_*)(?:[0-9](?:[0-9_]*[0-9])?)\n    |\n    # integer part\n    \\b(?:[1-9](?:[0-9_]*[0-9])?|0)\n      (?:\\.(_*)[0-9](?:[0-9_]*[0-9])?)?\n  )\n  ((_*)([eE][\\+\\-]?)(_*)[0-9](?:[0-9_]*[0-9])?)?\n\n  (_*)\n  (n)\n",
          "captures": {
            "1": {
              "name": "invalid.illegal.dec.edgeql"
            },
            "2": {
              "name": "invalid.illegal.dec.edgeql"
            },
            "4": {
              "name": "invalid.illegal.dec.edgeql"
            },
            "5": {
              "name": "storage.type.number.edgeql"
            },
            "6": {
              "name": "invalid.illegal.dec.edgeql"
            },
            "7": {
              "name": "invalid.illegal.dec.edgeql"
            },
            "8": {
              "name": "storage.type.number.edgeql"
            }
          }
        },
        {
          "name": "constant.numeric.integer.edgeql",
          "match": "(?x)\n  (?:\n    # integer part\n    \\b(?:[1-9](?:[0-9_]*[0-9])?|0)\n  )\n  (_*)\n  \\b\n",
          "captures": {
            "1": {
              "name": "invalid.illegal.dec.edgeql"
            },
            "2": {
              "name": "invalid.illegal.dec.edgeql"
            }
          }
        }
      ]
    },
    "string": {
      "patterns": [
        {
          "name": "string.quoted.raw.edgeql",
          "begin": "(r)(['\"])",
          "end": "(\\2)",
          "beginCaptures": {
            "1": {
              "name": "storage.type.string.edgeql"
            },
            "2": {
              "name": "punctuation.definition.string.begin.edgeql"
            }
          },
          "endCaptures": {
            "1": {
              "name": "punctuation.definition.string.end.edgeql"
            }
          }
        },
        {
          "name": "string.quoted.edgeql",
          "begin": "(['\"])",
          "end": "(\\1)",
          "beginCaptures": {
            "1": {
              "name": "punctuation.definition.string.begin.edgeql"
            }
          },
          "endCaptures": {
            "1": {
              "name": "punctuation.definition.string.end.edgeql"
            }
          },
          "patterns": [
            {
              "include": "#string-escapes"
            },
            {
              "include": "#string-invalid-escapes"
            }
          ]
        },
        {
          "name": "string.dollar.edgeql",
          "begin": "(\\$([[:alpha:]_][[:alnum:]]*)*\\$)",
          "end": "(\\1)",
          "beginCaptures": {
            "1": {
              "name": "punctuation.definition.string.begin.edgeql"
            }
          },
          "endCaptures": {
            "1": {
              "name": "punctuation.definition.string.end.edgeql"
            }
          }
        }
      ]
    },
    "string-escapes": {
      "name": "constant.character.escape.edgeql",
      "match": "(?x)\n  (\n    \\\\(?=\\s*\\n) |\n    \\\\[\\\\'\"bfnrt] |\n    \\\\x[0-7][0-9a-fA-F] |\n    \\\\u[0-9a-fA-F]{4} |\n    \\\\U[0-9a-fA-F]{8}\n  )\n"
    },
    "string-invalid-escapes": {
      "name": "invalid.illegal.escapes.edgeql",
      "match": "(\\\\.)"
    },
    "bytes": {
      "patterns": [
        {
          "name": "string.quoted.bytes.edgeql",
          "begin": "(b)(')",
          "end": "(\\2)",
          "beginCaptures": {
            "1": {
              "name": "storage.type.string.edgeql"
            },
            "2": {
              "name": "punctuation.definition.string.begin.edgeql"
            }
          },
          "endCaptures": {
            "1": {
              "name": "punctuation.definition.string.end.edgeql"
            }
          },
          "patterns": [
            {
              "include": "#bytes-escapes"
            },
            {
              "match": "([\\n -&(-\\[\\]-~])+"
            },
            {
              "name": "invalid.illegal.bytes.edgeql",
              "match": "(\\\\x.{1,2})|(\\\\.)|(.)"
            }
          ]
        },
        {
          "name": "string.quoted.bytes.edgeql",
          "begin": "(b)(\")",
          "end": "(\\2)",
          "beginCaptures": {
            "1": {
              "name": "storage.type.string.edgeql"
            },
            "2": {
              "name": "punctuation.definition.string.begin.edgeql"
            }
          },
          "endCaptures": {
            "1": {
              "name": "punctuation.definition.string.end.edgeql"
            }
          },
          "patterns": [
            {
              "include": "#bytes-escapes"
            },
            {
              "match": "([\\n -!#-\\[\\]-~])+"
            },
            {
              "name": "invalid.illegal.bytes.edgeql",
              "match": "(\\\\x.{1,2})|(\\\\.)|(.)"
            }
          ]
        }
      ]
    },
    "bytes-escapes": {
      "name": "constant.character.escape.edgeql",
      "match": "(?x)\n  (\n    \\\\[\\\\'\"bfnrt] |\n    \\\\x[0-9a-fA-F]{2}\n  )\n"
    },
    "casts": {
      "begin": "(?xi)\n  (?:\n    (?<= ^ | [@~+\\-*/%^<>=?,:(\\[{])\n    |\n    (?<=\n      AND | OR | NOT | LIKE | ILIKE | IS | IN | IF | ELSE |\n      UNION | ALL | EXISTS |\n\n      SELECT | GROUP | UPDATE | BY | THEN | LIMIT |\n      # there are some ligature-related issues with \"fi\" and \"ff\"\n      F[Ii]LTER | OF[Ff]SET\n    )\n  ) \\s* (\\<)\n",
      "end": "(\\>)",
      "beginCaptures": {
        "1": {
          "name": "keyword.operator.cast.begin.edgeql"
        }
      },
      "endCaptures": {
        "1": {
          "name": "keyword.operator.cast.end.edgeql"
        }
      },
      "contentName": "meta.typecast.edgeql",
      "patterns": [
        {
          "include": "#types"
        },
        {
          "include": "#types-common"
        }
      ]
    },
    "fncalls": {
      "patterns": [
        {
          "name": "meta.function-call.edgeql",
          "begin": "(?x)\n  \\b(?<!\\.|\\.<|\\.>)\n  # function name\n  (?:\n    (\n      # functions\n      abs | adjacent | all |\n      any | array_agg | array_fill |\n      array_get | array_join | array_replace |\n      array_unpack | assert | assert_distinct |\n      assert_exists | assert_single | bit_and |\n      bit_lshift | bit_not | bit_or |\n      bit_rshift | bit_xor | bounded_above |\n      bounded_below | bytes_get_bit | ceil |\n      contains | count | date_get |\n      datetime_current | datetime_get | datetime_of_statement |\n      datetime_of_transaction | datetime_truncate | duration_get |\n      duration_normalize_days | duration_normalize_hours | duration_to_seconds |\n      duration_truncate | enumerate | find |\n      floor | get_current_database | get_instance_name |\n      get_transaction_isolation | get_version | get_version_as_str |\n      json_array_unpack | json_get | json_object_pack |\n      json_object_unpack | json_set | json_typeof |\n      len | lg | ln |\n      log | max | mean |\n      min | multirange | multirange_unpack |\n      overlaps | random | range |\n      range_get_lower | range_get_upper | range_is_empty |\n      range_is_inclusive_lower | range_is_inclusive_upper | range_unpack |\n      re_match | re_match_all | re_replace |\n      re_test | round | search |\n      sequence_next | sequence_reset | sqrt |\n      stddev | stddev_pop | str_lower |\n      str_lpad | str_ltrim | str_pad_end |\n      str_pad_start | str_repeat | str_replace |\n      str_reverse | str_rpad | str_rtrim |\n      str_split | str_title | str_trim |\n      str_trim_end | str_trim_start | str_upper |\n      strictly_above | strictly_below | sum |\n      time_get | to_bigint | to_bytes |\n      to_date_duration | to_datetime | to_decimal |\n      to_duration | to_float32 | to_float64 |\n      to_int16 | to_int32 | to_int64 |\n      to_json | to_local_date | to_local_datetime |\n      to_local_time | to_relative_duration | to_str |\n      uuid_generate_v1mc | uuid_generate_v4 | var |\n      var_pop | with_options\n    |\n      # constraints\n      constraint | exclusive | expression |\n      len_value | max_ex_value | max_len_value |\n      max_value | min_ex_value | min_len_value |\n      min_value | one_of | regexp\n    )\n    |\n    ([[:alpha:]_][[:alnum:]_]*)\n    |\n    (`.*?`)\n  ) \\s*(\\()\n",
          "end": "(\\))",
          "beginCaptures": {
            "1": {
              "name": "support.function.builtin.edgeql"
            },
            "2": {
              "name": "entity.name.function.edgeql"
            },
            "3": {
              "name": "string.interpolated.edgeql"
            },
            "4": {
              "name": "punctuation.definition.arguments.begin.edgeql"
            }
          },
          "endCaptures": {
            "1": {
              "name": "punctuation.definition.arguments.end.edgeql"
            }
          },
          "patterns": [
            {
              "include": "#fncallargs"
            }
          ]
        },
        {
          "name": "meta.function-call.edgeql",
          "begin": "(?x)\n  \\b(?<!\\.|\\.<|\\.>)\n  # module\n  (?:\n    (\n      cal | cfg | enc |\n      ext | fts | math |\n      pg | schema | std |\n      sys\n    )\n    |\n    (?# masking built-ins in odd ways)\n    (\n      #functions\n      abs | adjacent | all |\n      any | array_agg | array_fill |\n      array_get | array_join | array_replace |\n      array_unpack | assert | assert_distinct |\n      assert_exists | assert_single | bit_and |\n      bit_lshift | bit_not | bit_or |\n      bit_rshift | bit_xor | bounded_above |\n      bounded_below | bytes_get_bit | ceil |\n      contains | count | date_get |\n      datetime_current | datetime_get | datetime_of_statement |\n      datetime_of_transaction | datetime_truncate | duration_get |\n      duration_normalize_days | duration_normalize_hours | duration_to_seconds |\n      duration_truncate | enumerate | find |\n      floor | get_current_database | get_instance_name |\n      get_transaction_isolation | get_version | get_version_as_str |\n      json_array_unpack | json_get | json_object_pack |\n      json_object_unpack | json_set | json_typeof |\n      len | lg | ln |\n      log | max | mean |\n      min | multirange | multirange_unpack |\n      overlaps | random | range |\n      range_get_lower | range_get_upper | range_is_empty |\n      range_is_inclusive_lower | range_is_inclusive_upper | range_unpack |\n      re_match | re_match_all | re_replace |\n      re_test | round | search |\n      sequence_next | sequence_reset | sqrt |\n      stddev | stddev_pop | str_lower |\n      str_lpad | str_ltrim | str_pad_end |\n      str_pad_start | str_repeat | str_replace |\n      str_reverse | str_rpad | str_rtrim |\n      str_split | str_title | str_trim |\n      str_trim_end | str_trim_start | str_upper |\n      strictly_above | strictly_below | sum |\n      time_get | to_bigint | to_bytes |\n      to_date_duration | to_datetime | to_decimal |\n      to_duration | to_float32 | to_float64 |\n      to_int16 | to_int32 | to_int64 |\n      to_json | to_local_date | to_local_datetime |\n      to_local_time | to_relative_duration | to_str |\n      uuid_generate_v1mc | uuid_generate_v4 | var |\n      var_pop | with_options\n      |\n      #constraints\n      constraint | exclusive | expression |\n      len_value | max_ex_value | max_len_value |\n      max_value | min_ex_value | min_len_value |\n      min_value | one_of | regexp\n    )\n    |\n    ([[:alpha:]_][[:alnum:]_]*)\n    |\n    (`.*?`)\n  )\n\n  \\s*(::)\\s*\n\n  # function name\n  (?:\n    (\n      #functions\n      abs | adjacent | all |\n      any | array_agg | array_fill |\n      array_get | array_join | array_replace |\n      array_unpack | assert | assert_distinct |\n      assert_exists | assert_single | bit_and |\n      bit_lshift | bit_not | bit_or |\n      bit_rshift | bit_xor | bounded_above |\n      bounded_below | bytes_get_bit | ceil |\n      contains | count | date_get |\n      datetime_current | datetime_get | datetime_of_statement |\n      datetime_of_transaction | datetime_truncate | duration_get |\n      duration_normalize_days | duration_normalize_hours | duration_to_seconds |\n      duration_truncate | enumerate | find |\n      floor | get_current_database | get_instance_name |\n      get_transaction_isolation | get_version | get_version_as_str |\n      json_array_unpack | json_get | json_object_pack |\n      json_object_unpack | json_set | json_typeof |\n      len | lg | ln |\n      log | max | mean |\n      min | multirange | multirange_unpack |\n      overlaps | random | range |\n      range_get_lower | range_get_upper | range_is_empty |\n      range_is_inclusive_lower | range_is_inclusive_upper | range_unpack |\n      re_match | re_match_all | re_replace |\n      re_test | round | search |\n      sequence_next | sequence_reset | sqrt |\n      stddev | stddev_pop | str_lower |\n      str_lpad | str_ltrim | str_pad_end |\n      str_pad_start | str_repeat | str_replace |\n      str_reverse | str_rpad | str_rtrim |\n      str_split | str_title | str_trim |\n      str_trim_end | str_trim_start | str_upper |\n      strictly_above | strictly_below | sum |\n      time_get | to_bigint | to_bytes |\n      to_date_duration | to_datetime | to_decimal |\n      to_duration | to_float32 | to_float64 |\n      to_int16 | to_int32 | to_int64 |\n      to_json | to_local_date | to_local_datetime |\n      to_local_time | to_relative_duration | to_str |\n      uuid_generate_v1mc | uuid_generate_v4 | var |\n      var_pop | with_options\n      |\n      #constraints\n      constraint | exclusive | expression |\n      len_value | max_ex_value | max_len_value |\n      max_value | min_ex_value | min_len_value |\n      min_value | one_of | regexp\n    )\n    |\n    ([[:alpha:]_][[:alnum:]_]*)\n    |\n    (`.*?`)\n  ) \\s*(\\()\n",
          "end": "(\\))",
          "beginCaptures": {
            "1": {
              "name": "support.other.module.builtin.edgeql"
            },
            "2": {
              "name": "support.function.builtin.edgeql"
            },
            "3": {
              "name": "entity.name.function.edgeql"
            },
            "4": {
              "name": "string.interpolated.edgeql"
            },
            "5": {
              "name": "keyword.operator.namespace.edgeql"
            },
            "6": {
              "name": "support.function.builtin.edgeql"
            },
            "7": {
              "name": "entity.name.function.edgeql"
            },
            "8": {
              "name": "string.interpolated.edgeql"
            },
            "9": {
              "name": "punctuation.definition.arguments.begin.edgeql"
            }
          },
          "endCaptures": {
            "1": {
              "name": "punctuation.definition.arguments.end.edgeql"
            }
          },
          "patterns": [
            {
              "include": "#fncallargs"
            }
          ]
        }
      ]
    },
    "builtin-modules": {
      "name": "support.other.module.builtin.edgeql",
      "match": "(?x) \\b(?<!::|\\.|\\.<|\\.>)(\n  cal | cfg | enc | ext |\n  fts | math | pg | schema |\n  std | sys\n)\\b\n"
    },
    "builtin-types": {
      "name": "support.type.builtin.edgeql",
      "match": "(?x) \\b(?<!\\.|\\.<|\\.>) (\n  Base64Alphabet | BaseObject | ElasticLanguage | FreeObject |\n  JsonEmpty | Language | LuceneLanguage | Object |\n  PGLanguage | Weight | anycontiguous | anydiscrete |\n  anyenum | anyfloat | anyint | anynumeric |\n  anypoint | anyreal | anyscalar | anytype |\n  array | bigint | bool | bytes |\n  date_duration | datetime | decimal | document |\n  duration | enum | float32 | float64 |\n  int16 | int32 | int64 | json |\n  local_date | local_datetime | local_time | multirange |\n  range | relative_duration | sequence | str |\n  tuple | uuid\n)\\b\n"
    },
    "builtin-indexes": {
      "name": "support.other.index.builtin.edgeql",
      "match": "(?x) \\b(?<!\\.|\\.<|\\.>) (\n  brin | btree | gin | gist |\n  hash | index | spgist\n)\\b\n"
    },
    "builtins": {
      "patterns": [
        {
          "name": "support.function.builtin.edgeql",
          "match": "(?x) \\b(?<!\\.|\\.<|\\.>) (\n  abs | adjacent | all |\n  any | array_agg | array_fill |\n  array_get | array_join | array_replace |\n  array_unpack | assert | assert_distinct |\n  assert_exists | assert_single | bit_and |\n  bit_lshift | bit_not | bit_or |\n  bit_rshift | bit_xor | bounded_above |\n  bounded_below | bytes_get_bit | ceil |\n  contains | count | date_get |\n  datetime_current | datetime_get | datetime_of_statement |\n  datetime_of_transaction | datetime_truncate | duration_get |\n  duration_normalize_days | duration_normalize_hours | duration_to_seconds |\n  duration_truncate | enumerate | find |\n  floor | get_current_database | get_instance_name |\n  get_transaction_isolation | get_version | get_version_as_str |\n  json_array_unpack | json_get | json_object_pack |\n  json_object_unpack | json_set | json_typeof |\n  len | lg | ln |\n  log | max | mean |\n  min | multirange | multirange_unpack |\n  overlaps | random | range |\n  range_get_lower | range_get_upper | range_is_empty |\n  range_is_inclusive_lower | range_is_inclusive_upper | range_unpack |\n  re_match | re_match_all | re_replace |\n  re_test | round | search |\n  sequence_next | sequence_reset | sqrt |\n  stddev | stddev_pop | str_lower |\n  str_lpad | str_ltrim | str_pad_end |\n  str_pad_start | str_repeat | str_replace |\n  str_reverse | str_rpad | str_rtrim |\n  str_split | str_title | str_trim |\n  str_trim_end | str_trim_start | str_upper |\n  strictly_above | strictly_below | sum |\n  time_get | to_bigint | to_bytes |\n  to_date_duration | to_datetime | to_decimal |\n  to_duration | to_float32 | to_float64 |\n  to_int16 | to_int32 | to_int64 |\n  to_json | to_local_date | to_local_datetime |\n  to_local_time | to_relative_duration | to_str |\n  uuid_generate_v1mc | uuid_generate_v4 | var |\n  var_pop | with_options\n)(?=\\s*\\()\\b\n"
        },
        {
          "name": "support.function.constraint.builtin.edgeql",
          "match": "(?x) \\b(?<!\\.|\\.<|\\.>) (\n  constraint | exclusive | expression |\n  len_value | max_ex_value | max_len_value |\n  max_value | min_ex_value | min_len_value |\n  min_value | one_of | regexp\n)\\b\n"
        },
        {
          "include": "#builtin-modules"
        },
        {
          "name": "support.other.link.builtin.edgeql",
          "match": "(?x) \\b(\n  __edgedbsys__ | __edgedbtpl__ | __new__ |\n  __old__ | __source__ | __specified__ |\n  __std__ | __subject__ | __type__\n)\\b\n"
        }
      ]
    }
  }
}
