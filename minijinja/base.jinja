<!DOCTYPE html>
<html class='h-full text-[18px]'>
  <head>
  {% block head -%}
    <title>{% block title -%}{%- endblock title %}</title>
    <meta name='viewport' content='width=device-width, initial-scale=1'>
    {% if no_tracking %}
      <meta name='robots' content='noindex, nofollow'>
    {% endif %}
    <meta property='fb:app_id' content='396441990404313'>
    {% block meta_seo %}{% endblock meta_seo %}
    {% block meta_og %}{% endblock meta_og %}
    <meta name='flattr:id' content='e350d5'>

    {% block css -%}
      <link rel='icon' href='/static/img/favicon.png'>
      <link href='/static/css/built-tailwind.css?v={{ GIT_REVISION }}' rel='stylesheet' media='screen'>
      <link rel='preconnect' href='https://fonts.googleapis.com'>
      <link rel='preconnect' href='https://fonts.gstatic.com' crossorigin>
      <link href='https://fonts.googleapis.com/css2?family=Niramit' rel='stylesheet'>
      <link href='//fonts.googleapis.com/css?family=Convergence' rel='stylesheet'>
      <link rel='stylesheet' href='/static/css/custom.css?v={{ GIT_REVISION }}'>
      <link rel='stylesheet' href='/static/css/pygments-css/material.css?v={{ GIT_REVISION }}'>
      <link rel='stylesheet' href='/static/css/syntect.css?v={{ GIT_REVISION }}'>
      <link rel='alternate' href='/feeds.atom' type='application/atom+xml' title='QuanWeb Atom feeds'>
      <link rel='alternate' href='/feeds.json' type='application/feed+json' title='QuanWeb JSONs feeds'>
      <style>
        [x-cloak] {
          display: none;
        }
      </style>
    {%- endblock css %}

    {% block headjs -%}
    <script src='https://unpkg.com/htmx.org@1.9.3/dist/htmx.min.js' defer></script>
    {%- endblock headjs %}
  {%- endblock head %}
  </head>

  <body class='flex flex-col min-h-full dark:bg-slate-900 dark:text-white'>
    {% include 'navbar.jinja' %}

    <header class='container mx-auto w-full max-w-6xl mb-8 px-2'>
      {% block banner -%}
        {% include 'banner_intro.jinja' %}
      {%- endblock banner %}
    </header>

    <main class='flex-auto'>
      {% block content -%}
        <div class='container mx-auto w-full max-w-4xl px-2'>
          {% block inner_content -%}
          {%- endblock inner_content %}
        </div>
      {%- endblock content %}
    </main>

    {% include 'footer.jinja' %}

    {% block js -%}
      <script src="https://cdn.jsdelivr.net/npm/minitz/dist/minitz.min.js"></script>
      {% if not running_locally %}
        {% if not no_tracking %}
          {% include 'block_tracking.jinja' %}
        {% endif %}
      {% endif %}
      <script>
      var LANG = '{{ lang }}';
      document.addEventListener('alpine:init', () => {
        const shortFormatter = new Intl.DateTimeFormat(LANG, { dateStyle: 'medium' });
        const longFormatter = new Intl.DateTimeFormat(LANG, { dateStyle: 'long', timeStyle: 'full'});
        Alpine.data('post_meta', (created_at = null) => ({
          created_at: created_at ? minitz.fromTZISO(created_at) : null,
          get created_at_date_display() {
            return this.created_at ? shortFormatter.format(this.created_at) : ''
          },
          get created_at_full_display() {
            return this.created_at ? longFormatter.format(this.created_at) : ''
          },
        }));
      })
      </script>
      <script type='module'>
        import { codeToHtml } from 'https://esm.sh/shiki@1.4.0'

        // Our old <code> element will be replaced by the one created by Shiki,
        // we need to keep old class names and copy to the new one.
        function getShikiOpt(lang, classes, startLine) {
          return {
            lang,
            theme: 'one-dark-pro',
            // Ref: https://shiki.style/guide/transformers#transformer-hooks
            transformers: [
              {
                code(node) {
                  classes.forEach((c) => this.addClassToHast(node, c))
                  const style = node.properties.style || ''
                  node.properties.style = style + `--start-line: ${startLine};`
                },
                pre(node) {
                  const className = classes.includes('q-with-lineno') ? 'py-4' : 'p-4'
                  this.addClassToHast(node, className)
                },
              }
            ]
          }

        }

        document.addEventListener('alpine:init', () => {
          Alpine.data('need_highlight', () => ({
            code: '',
            origClasses: [],
            startLine: 1,
            lang: 'text',
            init() {
              const codeElm = this.$refs.orig_code;
              const code = codeElm.textContent
              this.code = code.trim()
              const classes = Array.from(codeElm.classList.values())
              const className = classes.find((c) => c.startsWith('language-'))
              if (className) {
                this.lang = className.split('-')[1]
              }
              this.origClasses = classes
              codeElm.dataset.startLine && (this.startLine = parseInt(codeElm.dataset.startLine))
            },
            async highlight() {
              const lang = this.lang
              const classes = this.origClasses
              const opts = getShikiOpt(lang, classes, this.startLine)
              const html = await codeToHtml(this.code, opts)
              return html
            }
          }))
        })
      </script>
    {%- endblock js %}
    <script type='module'>
      // There are pages which only have tiny apps defined directly in HTML markup, without any
      // <script type='module'> block. We need to load Alpine to activate those apps too.
      import Alpine from "https://esm.sh/alpinejs@3.13.7"

      if (!window.Alpine) {
        window.Alpine = Alpine
      }

      if (window.Alpine) {
        console.log('Start tiny apps')
        window.Alpine.start()
      }
    </script>
  </body>
</html>
